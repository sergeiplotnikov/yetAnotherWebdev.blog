.TH "yet_another_webdev" "blog" "" "yet_another_webdev(blog)" "YAWDB_SET_POST_DATE"
.nh
.SH "PROJECT"
Understanding ECMAScript 6
.SH "POST"
Chapter 01 - Block Bindings
.SH "DESCRIPTION"
Introduces the 'let' and 'const' variable declarations and compares them to 'var' in different contexts.
.sp 3
.SH "var Declaration and Hoisting:"
.PP
Variable declaration using var are treated as if they're at the top of the
function or in the global scope (if outside a function). This is called
hoisting. Variable declaration is hoisted to the top and the initialization
remains in the same spot.
.SH "Block-Level Declarations:"
.PP
Block-level declararion declare bindings  that are inaccessible outside a given
block scope. 'Block scope', also called 'lexical scope' is created in funcions
and blocks indicated by { and }.
.SS "let Declarations:"
.PP
With syntax similar to 'var' they are not hoisted to the top, and are accessible
only inside the scope and after declaration.
.SS "No Redeclaration:"
.PP
If and identifier was already defined in a scope, a repeaded declaration in the
same scope will throw an error. If a variable declararion uses an identifier
that is already used in an outer scope, no error will be throws. The inner scope
variable 'shadows' the other variale making it inaccessible in the inner scope.
.sp
.RS -20
.nf
S_/;T_/;A_/;R_/;T_/;T_/;E_/;R_/;M_/;I_/;N_/;A_/;L_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
$ cat > shadow.js
var count = 30;
if (true) {
	let count = 50;
	console.log(count);
}
^C
$ node shadow.js
50
E_/;N_/;D_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
.SS "const Declaration:"
.PP
When defining a variable using 'const', the variable is considered a constant in
the sense that the value cannot be change once set. This is why initialization
must alwasy occur at declaration, otherwise an error will be thrown.
.SS "Constant vs. let Declarations:"
.PP
Both declarations are accessible only the the scope they were declared in.
Neither is hoisted. Both will shadow variables with identical name from outer
scope. Constant variables, unlike let, cannot be assigned a new value, such an
attempt will throw an error even in non-strict mode.
.SS "Object Declarations with const:"
.PP
A constant declaration prevents modification of the binding, not of the value.
So a const declaration of an object will not prevent a modification of the
object.
.sp
.RS -20
.nf
S_/;T_/;A_/;R_/;T_/;T_/;E_/;R_/;M_/;I_/;N_/;A_/;L_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
$ cat > object.js
const person = {
	name: "Nicholas",
};
person.name = "Greg";
console.log(person);
person = {
	name: "Greg",
};
^C
$ node object.js
{ name: 'Greg' }
/home/sergei/yetanotherwebdev.blog/temp/object.js:6
person = {
       ^

TypeError: Assignment to constant variable.
    at Object.<anonymous> (/home/sergei/yetanotherwebdev.blog/temp/object.js:6:8)
    at Module._compile (internal/modules/cjs/loader.js:778:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:831:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:623:3)
E_/;N_/;D_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
.SS "The Temporal Dead Zone:"
.PP
A variable declaration with either let or const cannot be accessed until after
the declaration. Attempting to do so  resulte in a refernce error. TDZ is never
named explicitly in the ECMAScript specification, but the term is often used to
describe why let and const bindings are not accessible before their declaration
(unlike var).
.PP
TDZ is different from a case where the identifier used was simply never defined.
A variable is in the TDZ only in the scope it is defined but before the
definition. The following two examples demonstare this:
.sp
.RS -20
.nf
S_/;T_/;A_/;R_/;T_/;T_/;E_/;R_/;M_/;I_/;N_/;A_/;L_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
$ cat > tdz.js
if (true) {
	console.log(typeof value);
	let value = "blue";
}
^C
$ node tdz.js
/home/sergei/yetanotherwebdev.blog/temp/tdz.js:2
	console.log(typeof value);
	        ^

ReferenceError: value is not defined
    at Object.<anonymous> (/home/sergei/yetanotherwebdev.blog/temp/tdz.js:2:10)
    at Module._compile (internal/modules/cjs/loader.js:778:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:831:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:623:3)
E_/;N_/;D_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
.SS ""
.PP
The typeof function tried to access the 'value' variable in the scope it was
defined in but before the definition, thus in the TDZ.
.sp
.RS -20
.nf
S_/;T_/;A_/;R_/;T_/;T_/;E_/;R_/;M_/;I_/;N_/;A_/;L_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
$ cat > noTdz.js
console.log(typeof value);
if (true) {
	let value = "blue";
}
^C
$ node noTdz.js
undefined
E_/;N_/;D_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
.SS ""
.PP
The 'value' is not defined in the scope of typeof, so there is no attemp to
access a variable inside the TDZ and no error is throws.
.SH "Block Bindings in Loops":
.PP
If a for-loop index was defined as var it will be available outside the loops
block.
.sp
.RS -20
.nf
S_/;T_/;A_/;R_/;T_/;T_/;E_/;R_/;M_/;I_/;N_/;A_/;L_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
$ cat > varForLoop.js
for ( var i = 0; i < 3; i++) {
	console.log(i);
}
console.log(i);
^C
$ node varForLoop.js
0
1
2
3
E_/;N_/;D_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
.sp
.RS -20
.nf
S_/;T_/;A_/;R_/;T_/;T_/;E_/;R_/;M_/;I_/;N_/;A_/;L_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
$ cat > letForLoop.js
for ( let i = 0; i < 3; i++) {
	console.log(i);
}
console.log(typeof i);
^C
$ node letForLoop.js
0
1
2
undefined
E_/;N_/;D_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
.SS ""
.PP
\'i\' exists only within the for loop scope. An attempt to read it would throw an
error.
.SH "Functions in Loops:"
.PP
When var is used as a loop index it behaves as single 'global' variable and
creates the following issue:
.sp
.RS -20
.nf
S_/;T_/;A_/;R_/;T_/;T_/;E_/;R_/;M_/;I_/;N_/;A_/;L_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
$ cat > varForLoopFuncs.js
var funcs = [];

for ( var i = 0; i < 3; i++) {
	funcs.push(function() {
		console.log(i);
	});
}

funcs.forEach(function(func) {
	func();
});
^C
$ node varForLoopFuncs.js
3
3
3
E_/;N_/;D_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
.SS ""
.PP
Since by the time the loop is done 'i' equals 3 and all the functions point to
the same 'i', they all print 3.
.PP
This issue can be solved by using 'immediately invoked function expressions'
(IIFEs). This method creates a local copy of i, with the value of 'i' at the
time of invokation, for each of the created functions.
.sp
.RS -20
.nf
S_/;T_/;A_/;R_/;T_/;T_/;E_/;R_/;M_/;I_/;N_/;A_/;L_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
$ cat > varForLoopIIFE.js
var funcs = [];

for ( var i = 0; i < 3; i++) {
	funcs.push((function(value) {
		return function() {
			console.log(value);
		}
	}(i)));
}

funcs.forEach(function(func) {
	func();
});
^C
$ node varForLoopIIFE.js
0
1
2
E_/;N_/;D_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
.SS ""
.PP
In the exmaple above, for each iteration of the loop, the current value of 'i'
is stored as a local 'value' variable.
.SS "let Declarations in Loops"
.PP
Declaring the for loop with 'let' allows you the get the same result as the last
example, but without using IIFEs:
.sp
.RS -20
.nf
S_/;T_/;A_/;R_/;T_/;T_/;E_/;R_/;M_/;I_/;N_/;A_/;L_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
$ cat > letForLoop.js
var funcs = [];

for ( let i = 0; i < 3; i++) {
	funcs.push(function() {
		console.log(i);
	});
}

funcs.forEach(function(func) {
	func();
})
^C
$ node letForLoop.js
0
1
2
E_/;N_/;D_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
.SS ""
.PP
The let declaration causes a new variable to be created each loop iteration. The
same is true for 'for-in' and 'for-of' loops.
.IP
[page 10] "It's important to understand that the behavior of let declarations in
loop is a specially defined behavior in the specification and is not necessarily
related to the non-hoisting characteristics of let. In fact, early
implementations of let did not exhibit this behavior, because it was added later
in the process." [page 10]
.SS "const Declaration in Loops:"
.PP
Using a const index in a 'simple' for loop works fine until you try to update
the value of the index:
.sp
.RS -20
.nf
S_/;T_/;A_/;R_/;T_/;T_/;E_/;R_/;M_/;I_/;N_/;A_/;L_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
$ cat > constForLoop.js
for ( const i = 0; i < 3; i++) {
	console.log(i);
}
^C
$ node constForLoop.js
0
/home/sergei/yetanotherwebdev.blog/temp/constForLoop_01.js:1
for ( const i = 0; i < 3; i++) {
                           ^

TypeError: Assignment to constant variable.
    at Object.<anonymous> (/home/sergei/yetanotherwebdev.blog/temp/constForLoop_01.js:1:28)
    at Module._compile (internal/modules/cjs/loader.js:778:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)
    at Function.Module._load (internal/modules/cjs/loader.js:585:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:831:12)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:623:3)
E_/;N_/;D_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
.SS ""
.PP
The first iteration completed successfully and then an error was thrown when the
increment operator attempted to update a 'constant' varialbe. For 'for-in' and
'for-of' loops where the variable is not being updated using const will not
cause problems. This is because on each loop iteration a new binding is created.
.SH "Global Block Binding"
.PP
When using var declaratin in the global scope, it craetes a new global variable
which is a property on the global object ('window' in browser, 'globlal' in
Node). This means you can accidentally overwrite an existing globla property.
.sp
.RS -20
.nf
S_/;T_/;A_/;R_/;T_/;T_/;E_/;R_/;M_/;I_/;N_/;A_/;L_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
$ cat > globalVar.js
var xyz = 'some text';
console.log('xyz' in global);
^C
$ node globalVar.js
false
E_/;N_/;D_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
.SS ""
.PP
While running S_/;T_/;A_/;R_/;T_/;I_/;N_/;F_/;O_/;H_/;I_/;G_/;H_/;L_/;I_/;G_/;H_/;T_/;the script E_/;N_/;D_/;H_/;I_/;G_/;H_/;L_/;I_/;G_/;H_/;T_/;above does not demonstarte the described behavior,
because you get false, running the same code S_/;T_/;A_/;R_/;T_/;T_/;E_/;R_/;M_/;I_/;N_/;A_/;L_/;H_/;I_/;G_/;H_/;L_/;I_/;G_/;H_/;T_/;inside Node REPL will return TRUE.
The reason for this is E_/;N_/;D_/;H_/;I_/;G_/;H_/;L_/;I_/;G_/;H_/;T_/;the fact that code from a script S_/;T_/;A_/;R_/;T_/;S_/;O_/;U_/;R_/;C_/;E_/;H_/;I_/;G_/;H_/;L_/;I_/;G_/;H_/;T_/;runs inside a module
while REPL E_/;N_/;D_/;H_/;I_/;G_/;H_/;L_/;I_/;G_/;H_/;T_/;runs 'global'.
.SY
Based on: https://stackoverflow.com/questions/20861049/this-different-between-repl-and-script
.YS
.SS ""
.PP
Declaring a variable in the global scope, that shares a name with a property of
a global object (window or global) will not overwrite this property but will
shadow it.
.sp
.RS -20
.nf
S_/;T_/;A_/;R_/;T_/;T_/;E_/;R_/;M_/;I_/;N_/;A_/;L_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
$ echo "console.log(RegExp === global.RegExp)" | node
true
$ cat > globalShadowing.js
let RegExp = '123';
console.log(RegExp === global.RegExp);
console.log(RegExp);
^C
$ node globalShadowing.js
false
123
E_/;N_/;D_/;S_/;E_/;C_/;T_/;I_/;O_/;N_/;.
.SS ""
.IP
"You might still want to use var in the global scope if you have code taht
should be available from the globla object. This is most common in a browser
when you want to access code accross frames or windows." [page 12]
.SS ""
